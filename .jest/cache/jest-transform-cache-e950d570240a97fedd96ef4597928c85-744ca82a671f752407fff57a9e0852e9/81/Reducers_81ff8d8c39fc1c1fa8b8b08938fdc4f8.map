{"version":3,"sources":["Reducers.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAEA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAkCA,MAAM,YAAY,GAAG,SAAS,CAAC,MAAV,CAAiB;AACpC,EAAA,SAAS,EAAE,KADyB;AAEpC,EAAA,GAAG,EAAE,IAF+B;AAGpC,EAAA,SAAS,EAAE,SAAS,CAAC,IAAV,CAAe,EAAf;AAHyB,CAAjB,CAArB;;AAMA,MAAa,SAAb,SAA+B,YAA/B,CAA2C;;AAA3C,OAAA,CAAA,SAAA,GAAA,SAAA;AAEa,OAAA,CAAA,SAAA,GAAY,IAAI,SAAJ,EAAZ;;AAGb,MAAM,WAAW,GAAG,CAAC,KAAK,GAAG,OAAA,CAAA,SAAT,EAAoB,MAApB,KAA8C;AAChE,UAAQ,MAAM,CAAC,IAAf;AACE,SAAK,WAAA,CAAA,YAAL;AACE,aAAO,KAAK,CAAC,GAAN,CAAU,WAAV,EAAuB,IAAvB,CAAP;;AACF,SAAK,WAAA,CAAA,mBAAL;AACE,YAAM,IAAI,GAAG,SAAS,CAAC,MAAV,CAAiB,MAAM,CAAC,IAAxB,CAAb;AACA,aAAO,KAAK,CAAC,GAAN,CAAU,WAAV,EAAuB,KAAvB,EAA8B,GAA9B,CAAkC,WAAlC,EAA+C,IAA/C,CAAP;;AACF,SAAK,WAAA,CAAA,mBAAL;AACE,aAAO,KAAK,CAAC,GAAN,CAAU,WAAV,EAAuB,KAAvB,EAA8B,GAA9B,CAAkC,KAAlC,EAAyC,MAAM,CAAC,GAAhD,CAAP;;AACF;AACE,aAAO,KAAP;AATJ;AAWD,CAZD;;AAcA,OAAA,CAAA,OAAA,GAAe,WAAf","sourcesContent":["import * as Immutable from 'immutable'\n\nimport { TopicRequest, TopicRequestSuccess, TopicRequestFailure } from './Constants'\nimport {\n  topicRequest,\n  topicRequestSuccess,\n  topicRequestFailure,\n  TopicItem,\n  AuthorInfo,\n} from './Actions'\n\n// Action Type\nexport type GetTopicsActionType = ReturnType<typeof topicRequest>\nexport type GetTopicsSuccessActionType = ReturnType<typeof topicRequestSuccess>\nexport type GetTopicsFailureActionType = ReturnType<typeof topicRequestFailure>\n\nexport type HomeActionType = GetTopicsSuccessActionType&GetTopicsFailureActionType&GetTopicsActionType\n\n\n// initial State Type\n\ntype AuthorInfoRecord = Immutable.Record.Factory<AuthorInfo>\n\nexport interface ITopicItem extends TopicItem {\n  AuthorInfo: AuthorInfoRecord\n}\n\ntype TopicItemRecord = Immutable.Record.Factory<ITopicItem>\nexport type TopicItemList = Immutable.List<TopicItemRecord> | Immutable.List<never>\n\nexport interface ITopicState {\n  isLoading: boolean\n  err: null | string\n  topicList: TopicItemList\n}\n\nconst InitialState = Immutable.Record({\n  isLoading: false,\n  err: null,\n  topicList: Immutable.List([]),\n} as ITopicState)\n\nexport class HomeState extends InitialState {}\n\nexport const homeState = new HomeState()\n\n// home reducer\nconst HomeReducer = (state = homeState, action: HomeActionType) => {\n  switch (action.type) {\n    case TopicRequest:\n      return state.set('isLoading', true)\n    case TopicRequestSuccess:\n      const data = Immutable.fromJS(action.data) as TopicItemList\n      return state.set('isLoading', false).set('topicList', data)\n    case TopicRequestFailure:\n      return state.set('isLoading', false).set('err', action.err)\n    default:\n      return state\n  }\n}\n\nexport default HomeReducer\n"],"sourceRoot":""}